package project2.project2_IDE;
/*Project 2 – Record & Playback Tests in the Actual Environment
Objective: Use Selenium IDE, which is implemented as a Firefox extension, to record and
play back tests in the actual environment
Requirements: Write Selenium scripts to:
 Record and playback an activity
 Use intelligent field selection feature to use IDs, names, or XPath
 Use Autocomplete for common Selenium commands
 Debug and set breakpoints in the code
 Save tests as HTML file
 Perform automatically assert the title of every page
 Add new functionality to the API
 Apply custom formats and export capabilities
 * */
 

// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class DefaultSuiteTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void sDverifyInValidLogin() {
    driver.get("https://www.saucedemo.com/");
    driver.manage().window().setSize(new Dimension(1064, 816));
    driver.findElement(By.cssSelector("*[data-test=\"username\"]")).click();
    driver.findElement(By.cssSelector("*[data-test=\"username\"]")).sendKeys("test");
    driver.findElement(By.cssSelector("*[data-test=\"password\"]")).click();
    driver.findElement(By.cssSelector("*[data-test=\"password\"]")).sendKeys("test1234");
    assertThat(driver.findElement(By.cssSelector(".login_wrapper")).getText(), is("Accepted usernames are:\\\\nstandard_user\\\\nlocked_out_user\\\\nproblem_user\\\\nperformance_glitch_user\\\\nPassword for all users:\\\\nsecret_sauce"));
    driver.findElement(By.cssSelector("*[data-test=\"login-button\"]")).click();
    assertThat(driver.findElement(By.cssSelector("*[data-test=\"error\"]")).getText(), is("Epic sadface: Username and password do not match any user in this service"));
    driver.close();
  }
  @Test
  public void sDVerifyLogout() {
    driver.get("https://www.saucedemo.com/");
    driver.manage().window().setSize(new Dimension(1064, 816));
    driver.findElement(By.cssSelector("*[data-test=\"username\"]")).click();
    driver.findElement(By.cssSelector("*[data-test=\"username\"]")).sendKeys("standard_user");
    driver.findElement(By.cssSelector("*[data-test=\"password\"]")).click();
    driver.findElement(By.cssSelector("*[data-test=\"password\"]")).sendKeys("secret_sauce");
    driver.findElement(By.cssSelector("*[data-test=\"login-button\"]")).click();
    driver.findElement(By.id("react-burger-menu-btn")).click();
    driver.findElement(By.id("logout_sidebar_link")).click();
    assertThat(driver.getTitle(), is("Swag Labs"));
    driver.close();
  }
  @Test
  public void sDVerifyTitle() {
    driver.get("https://www.saucedemo.com/");
    driver.manage().window().setSize(new Dimension(1062, 816));
    assertThat(driver.getTitle(), is("Swag Labs"));
    driver.close();
  }
  @Test
  public void sDverifyValidLogin() {
    driver.get("https://www.saucedemo.com/");
    driver.manage().window().setSize(new Dimension(1064, 816));
    driver.findElement(By.cssSelector("*[data-test=\"username\"]")).click();
    driver.findElement(By.cssSelector("*[data-test=\"username\"]")).sendKeys("standard_user");
    driver.findElement(By.cssSelector("*[data-test=\"password\"]")).click();
    driver.findElement(By.cssSelector("*[data-test=\"password\"]")).sendKeys("secret_sauce");
    driver.findElement(By.cssSelector("*[data-test=\"login-button\"]")).click();
    assertThat(driver.getTitle(), is("Swag Labs"));
    driver.close();
  }
}
